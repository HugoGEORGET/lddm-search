{"version":3,"sources":["components/Hit/Hit.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Hit","props","className","hit","Type","Episode","Ordre","Highlight","attribute","href","target","rel","icon","faExternalLinkAlt","charAt","toUpperCase","slice","searchClient","algoliasearch","App","style","color","InstantSearch","indexName","SearchBox","autoFocus","translations","placeholder","PoweredBy","searchBy","MenuSelect","transformItems","items","map","item","label","seeAllOption","Stats","stats","nbHits","timeSpentMS","InfiniteHits","hitComponent","loadMore","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8aae193b.chunk.js","sourcesContent":["import { faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Highlight } from 'react-instantsearch-dom';\n\nimport './Hit.css';\n\nfunction Hit(props) {\n  return (\n    <article className={props.hit.Type}>\n      Épisode n°{props.hit.Episode} (\n      {props.hit.Ordre === 1 ? '1er' : `${props.hit.Ordre}ème`} morceau)\n      <h1>\n        <Highlight attribute=\"Titre (sur Album)\" hit={props.hit} />\n      </h1>\n      <hr />\n      <p>\n        Jeu :{' '}\n        <b>\n          <Highlight attribute=\"Jeu\" hit={props.hit} />\n        </b>\n      </p>\n      <p>\n        Compositeur / Interprète :{' '}\n        <b>\n          <Highlight attribute=\"Compositeur / Interprète\" hit={props.hit} />\n        </b>\n        {props.hit['Liens web'] ? (\n          <a\n            href={props.hit['Liens web']}\n            className=\"ext-link\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <FontAwesomeIcon icon={faExternalLinkAlt} />{' '}\n          </a>\n        ) : (\n          ''\n        )}\n      </p>\n      <p>\n        Type : <b>{props.hit.Type.charAt(0).toUpperCase() + props.hit.Type.slice(1)}</b>\n      </p>\n    </article>\n  );\n}\n\nHit.propTypes = {\n  hit: PropTypes.object.isRequired,\n};\n\nexport default Hit;\n","import algoliasearch from 'algoliasearch/lite';\nimport React, { Component } from 'react';\nimport {\n  InfiniteHits,\n  InstantSearch,\n  MenuSelect,\n  PoweredBy,\n  SearchBox,\n  Stats,\n} from 'react-instantsearch-dom';\nimport Hit from '../Hit/Hit';\nimport './App.css';\n\nconst searchClient = algoliasearch(\n  'RWDUF9UWAN',\n  'b660b5d864b51219a1f14583a465c34e'\n);\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <header className=\"header\">\n          <h1>Les Démons du MIDI</h1>\n          <hr />\n          <small>\n            un podcast{' '}\n            <a\n              href=\"https://www.geekzone.fr/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Geekzone\n            </a>{' '}\n            par{' '}\n            <a\n              href=\"https://twitter.com/Pipomantis\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Pipomantis\n            </a>\n            ,{' '}\n            <a\n              href=\"https://twitter.com/Gautoz\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Gautoz\n            </a>{' '}\n            et{' '}\n            <a\n              href=\"https://twitter.com/Faskil\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Faskil\n            </a>\n          </small>\n        </header>\n        <div className=\"pattern-cross-dots-xl\" style={{ color: 'blue' }}>\n          <div\n            className=\"container pattern-cross-dots-xl\"\n            style={{ color: 'initial' }}\n          >\n            <b>\n              Un grand merci à{' '}\n              <a\n                href=\"https://twitter.com/PatrickRaberin\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                @patrickraberin\n              </a>{' '}\n              et{' '}\n              <a\n                href=\"https://twitter.com/PbnPierre\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                @PbnPierre\n              </a>{' '}\n              pour le{' '}\n              <a\n                href=\"https://docs.google.com/spreadsheets/d/1KsT0n2ipMIBLT4Ajc9k0uHxwCXYZ_HaBrjVjoZz8HbE\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Google Sheet\n              </a>{' '}\n              tenu à jour !\n            </b>\n            <hr />\n            <InstantSearch searchClient={searchClient} indexName=\"lddm\">\n              <div className=\"search-panel\">\n                <div className=\"search-panel__results\">\n                  <SearchBox\n                    autoFocus\n                    className=\"searchbox\"\n                    translations={{\n                      placeholder: 'Cherchez un morceau, jeu, compositeur...',\n                    }}\n                  />\n                  <PoweredBy translations={{ searchBy: 'Recherche par' }} />\n                  <MenuSelect\n                    attribute=\"Type\"\n                    transformItems={items =>\n                      items.map(item => ({\n                        ...item,\n                        label:\n                          // Capitalize the first letter of each type\n                          item.label.charAt(0).toUpperCase() +\n                          item.label.slice(1),\n                      }))\n                    }\n                    translations={{\n                      seeAllOption: 'Type de morceau',\n                    }}\n                  />\n                  <Stats\n                    translations={{\n                      stats(nbHits, timeSpentMS) {\n                        return `${nbHits} morceaux trouvés en ${timeSpentMS}ms`;\n                      },\n                    }}\n                  />\n                  <InfiniteHits\n                    hitComponent={Hit}\n                    translations={{ loadMore: 'Charger plus de morceaux' }}\n                  />\n                </div>\n              </div>\n            </InstantSearch>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport './index.css';\nimport 'pattern.css/dist/pattern.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}